// Autogenerated from Pigeon (v22.6.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

enum CaptureSessionPreset {
  cif352x288,
  vga640x480,
  hd1280x720,
  hd1920x1080,
  hd4K3840x2160,
  photo,
}

enum CropType {
  rectangle,
  circle,
}

enum DevicePosition {
  back,
  front,
}

enum ExposureMode {
  autoExpose,
  continuousAutoExposure,
}

enum FocusMode {
  autoFocus,
  continuousAutoFocus,
}

enum MediaType {
  image,
  video,
}

enum VideoExportType {
  mov,
  mp4,
}

class CropAspectRatio {
  CropAspectRatio({
    required this.aspectRatioX,
    required this.aspectRatioY,
  });

  int aspectRatioX;

  int aspectRatioY;

  Object encode() {
    return <Object?>[
      aspectRatioX,
      aspectRatioY,
    ];
  }

  static CropAspectRatio decode(Object result) {
    result as List<Object?>;
    return CropAspectRatio(
      aspectRatioX: result[0]! as int,
      aspectRatioY: result[1]! as int,
    );
  }
}

class CropOptions {
  CropOptions({
    this.type = CropType.rectangle,
    this.aspectRatio,
  });

  CropType type;

  CropAspectRatio? aspectRatio;

  Object encode() {
    return <Object?>[
      type,
      aspectRatio,
    ];
  }

  static CropOptions decode(Object result) {
    result as List<Object?>;
    return CropOptions(
      type: result[0]! as CropType,
      aspectRatio: result[1] as CropAspectRatio?,
    );
  }
}

class RawMediaData {
  RawMediaData({
    required this.path,
    required this.type,
    this.thumbPath,
    this.size,
  });

  String path;

  MediaType type;

  String? thumbPath;

  int? size;

  Object encode() {
    return <Object?>[
      path,
      type,
      thumbPath,
      size,
    ];
  }

  static RawMediaData decode(Object result) {
    result as List<Object?>;
    return RawMediaData(
      path: result[0]! as String,
      type: result[1]! as MediaType,
      thumbPath: result[2] as String?,
      size: result[3] as int?,
    );
  }
}

class RawCameraConfiguration {
  RawCameraConfiguration({
    this.mediaType = MediaType.image,
    this.maxSizeKB,
    this.locale,
    this.cropOptions,
    this.allowTakePhoto = true,
    this.allowRecordVideo = true,
    this.minDurationSeconds = 0,
    this.maxDurationSeconds = 30,
    this.isVideoMirrored = true,
    this.sessionPreset = CaptureSessionPreset.hd1920x1080,
    this.focusMode = FocusMode.continuousAutoFocus,
    this.exposureMode = ExposureMode.continuousAutoExposure,
    this.showFlashSwitch = true,
    this.allowSwitchCamera = true,
    this.tapToRecordVideo = true,
    this.enableWideCameras = true,
    this.videoExportType = VideoExportType.mp4,
    this.devicePosition = DevicePosition.back,
  });

  /// The type of media to use. Defaults to [MediaType.image].
  MediaType mediaType;

  /// Max size of the media file in KB.
  int? maxSizeKB;

  /// The locale of the camera. Defaults to the system locale.
  String? locale;

  CropOptions? cropOptions;

  /// Allow taking photos in the camera. Defaults to `true`.
  bool allowTakePhoto;

  /// Allow video recording in the camera. Defaults to `true`.
  bool allowRecordVideo;

  /// Minimum recording duration. Defaults to `0`.
  int minDurationSeconds;

  /// Maximum recording duration. Defaults to `30`, minimum is `1`.
  int maxDurationSeconds;

  /// Indicates whether the video flowing through the connection
  /// should be mirrored about its vertical axis. Defaults to `true`.
  bool isVideoMirrored;

  /// Video resolution. Defaults to [CaptureSessionPreset.hd1920x1080].
  CaptureSessionPreset sessionPreset;

  /// Camera focus mode. Defaults to [FocusMode.continuousAutoFocus].
  FocusMode focusMode;

  /// Camera exposure mode. Defaults to [ExposureMode.continuousAutoExposure].
  ExposureMode exposureMode;

  /// Camera flash switch. Defaults to `true`.
  bool showFlashSwitch;

  /// Whether to support switch camera. Defaults to `true`.
  bool allowSwitchCamera;

  /// Flag to enable tap-to-record functionality. Default is `true`.
  /// If [allowTakePhoto] is set to `true`, [tapToRecordVideo] will be ignored.
  bool tapToRecordVideo;

  /// Enable the use of wide cameras (on supported devices). Defaults to `true`.
  bool enableWideCameras;

  /// Video export format for recording/editing video. Defaults to `mp4`.
  VideoExportType videoExportType;

  /// The default camera position after entering the camera. Defaults to `back`.
  DevicePosition devicePosition;

  Object encode() {
    return <Object?>[
      mediaType,
      maxSizeKB,
      locale,
      cropOptions,
      allowTakePhoto,
      allowRecordVideo,
      minDurationSeconds,
      maxDurationSeconds,
      isVideoMirrored,
      sessionPreset,
      focusMode,
      exposureMode,
      showFlashSwitch,
      allowSwitchCamera,
      tapToRecordVideo,
      enableWideCameras,
      videoExportType,
      devicePosition,
    ];
  }

  static RawCameraConfiguration decode(Object result) {
    result as List<Object?>;
    return RawCameraConfiguration(
      mediaType: result[0]! as MediaType,
      maxSizeKB: result[1] as int?,
      locale: result[2] as String?,
      cropOptions: result[3] as CropOptions?,
      allowTakePhoto: result[4]! as bool,
      allowRecordVideo: result[5]! as bool,
      minDurationSeconds: result[6]! as int,
      maxDurationSeconds: result[7]! as int,
      isVideoMirrored: result[8]! as bool,
      sessionPreset: result[9]! as CaptureSessionPreset,
      focusMode: result[10]! as FocusMode,
      exposureMode: result[11]! as ExposureMode,
      showFlashSwitch: result[12]! as bool,
      allowSwitchCamera: result[13]! as bool,
      tapToRecordVideo: result[14]! as bool,
      enableWideCameras: result[15]! as bool,
      videoExportType: result[16]! as VideoExportType,
      devicePosition: result[17]! as DevicePosition,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is CaptureSessionPreset) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is CropType) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is DevicePosition) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is ExposureMode) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is FocusMode) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is MediaType) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is VideoExportType) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    }    else if (value is CropAspectRatio) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is CropOptions) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is RawMediaData) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is RawCameraConfiguration) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CaptureSessionPreset.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CropType.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : DevicePosition.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ExposureMode.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FocusMode.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MediaType.values[value];
      case 135: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : VideoExportType.values[value];
      case 136: 
        return CropAspectRatio.decode(readValue(buffer)!);
      case 137: 
        return CropOptions.decode(readValue(buffer)!);
      case 138: 
        return RawMediaData.decode(readValue(buffer)!);
      case 139: 
        return RawCameraConfiguration.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MultiMediaApi {
  /// Constructor for [MultiMediaApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MultiMediaApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<RawMediaData?> openCamera(RawCameraConfiguration cameraConfig) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.multi_media_picker.MultiMediaApi.openCamera$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[cameraConfig]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as RawMediaData?);
    }
  }
}
