// Copyright 2025 Roman Cinis. All rights reserved.
// Use of this source code is governed by a MIT license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import, no_leading_underscores_for_local_identifiers
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:multimedia_picker_platform_interface/src/messages.g.dart';

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is CaptureSessionPreset) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is EditTool) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    } else if (value is UiLocale) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    } else if (value is AdjustSliderType) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    } else if (value is AdjustTool) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    } else if (value is CancelButtonStyle) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    } else if (value is DevicePosition) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    } else if (value is ExposureMode) {
      buffer.putUint8(136);
      writeValue(buffer, value.index);
    } else if (value is FocusMode) {
      buffer.putUint8(137);
      writeValue(buffer, value.index);
    } else if (value is HudStyle) {
      buffer.putUint8(138);
      writeValue(buffer, value.index);
    } else if (value is ImpactFeedbackStyle) {
      buffer.putUint8(139);
      writeValue(buffer, value.index);
    } else if (value is MediaType) {
      buffer.putUint8(140);
      writeValue(buffer, value.index);
    } else if (value is PhotoBrowserStyle) {
      buffer.putUint8(141);
      writeValue(buffer, value.index);
    } else if (value is VideoExportType) {
      buffer.putUint8(142);
      writeValue(buffer, value.index);
    } else if (value is VideoStabilization) {
      buffer.putUint8(143);
      writeValue(buffer, value.index);
    } else if (value is CameraOrientation) {
      buffer.putUint8(144);
      writeValue(buffer, value.index);
    } else if (value is RawOverlayImage) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is RawLocalizations) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is RawUiConfiguration) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is ClipAspectRatio) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is ClipOptions) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is RawMediaData) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is RawPickerConfiguration) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is RawEditConfiguration) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else if (value is RawCameraConfiguration) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CaptureSessionPreset.values[value];
      case 130:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : EditTool.values[value];
      case 131:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : UiLocale.values[value];
      case 132:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AdjustSliderType.values[value];
      case 133:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AdjustTool.values[value];
      case 134:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CancelButtonStyle.values[value];
      case 135:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : DevicePosition.values[value];
      case 136:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ExposureMode.values[value];
      case 137:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FocusMode.values[value];
      case 138:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : HudStyle.values[value];
      case 139:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ImpactFeedbackStyle.values[value];
      case 140:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MediaType.values[value];
      case 141:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PhotoBrowserStyle.values[value];
      case 142:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : VideoExportType.values[value];
      case 143:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : VideoStabilization.values[value];
      case 144:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CameraOrientation.values[value];
      case 145:
        return RawOverlayImage.decode(readValue(buffer)!);
      case 146:
        return RawLocalizations.decode(readValue(buffer)!);
      case 147:
        return RawUiConfiguration.decode(readValue(buffer)!);
      case 148:
        return ClipAspectRatio.decode(readValue(buffer)!);
      case 149:
        return ClipOptions.decode(readValue(buffer)!);
      case 150:
        return RawMediaData.decode(readValue(buffer)!);
      case 151:
        return RawPickerConfiguration.decode(readValue(buffer)!);
      case 152:
        return RawEditConfiguration.decode(readValue(buffer)!);
      case 153:
        return RawCameraConfiguration.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class TestMultimediaApi {
  static TestDefaultBinaryMessengerBinding? get _testBinaryMessengerBinding =>
      TestDefaultBinaryMessengerBinding.instance;
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  Future<RawMediaData?> openCamera(
    RawCameraConfiguration cameraConfig,
    RawEditConfiguration editConfig,
    RawPickerConfiguration pickerConfig,
    RawUiConfiguration uiConfig,
  );

  Future<RawMediaData?> editMedia(
    RawMediaData data,
    RawEditConfiguration editConfig,
    RawPickerConfiguration pickerConfig,
    RawUiConfiguration uiConfig,
  );

  Future<List<RawMediaData>?> openGallery(
    RawEditConfiguration editConfig,
    RawPickerConfiguration pickerConfig,
    RawUiConfiguration uiConfig,
  );

  static void setUp(
    TestMultimediaApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.multimedia_picker.MultiMediaApi.openCamera$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<
          Object?
        >(pigeonVar_channel, (Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.openCamera was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final RawCameraConfiguration? arg_cameraConfig =
              (args[0] as RawCameraConfiguration?);
          assert(
            arg_cameraConfig != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.openCamera was null, expected non-null RawCameraConfiguration.',
          );
          final RawEditConfiguration? arg_editConfig =
              (args[1] as RawEditConfiguration?);
          assert(
            arg_editConfig != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.openCamera was null, expected non-null RawEditConfiguration.',
          );
          final RawPickerConfiguration? arg_pickerConfig =
              (args[2] as RawPickerConfiguration?);
          assert(
            arg_pickerConfig != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.openCamera was null, expected non-null RawPickerConfiguration.',
          );
          final RawUiConfiguration? arg_uiConfig =
              (args[3] as RawUiConfiguration?);
          assert(
            arg_uiConfig != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.openCamera was null, expected non-null RawUiConfiguration.',
          );
          try {
            final RawMediaData? output = await api.openCamera(
              arg_cameraConfig!,
              arg_editConfig!,
              arg_pickerConfig!,
              arg_uiConfig!,
            );
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.multimedia_picker.MultiMediaApi.editMedia$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<
          Object?
        >(pigeonVar_channel, (Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.editMedia was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final RawMediaData? arg_data = (args[0] as RawMediaData?);
          assert(
            arg_data != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.editMedia was null, expected non-null RawMediaData.',
          );
          final RawEditConfiguration? arg_editConfig =
              (args[1] as RawEditConfiguration?);
          assert(
            arg_editConfig != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.editMedia was null, expected non-null RawEditConfiguration.',
          );
          final RawPickerConfiguration? arg_pickerConfig =
              (args[2] as RawPickerConfiguration?);
          assert(
            arg_pickerConfig != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.editMedia was null, expected non-null RawPickerConfiguration.',
          );
          final RawUiConfiguration? arg_uiConfig =
              (args[3] as RawUiConfiguration?);
          assert(
            arg_uiConfig != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.editMedia was null, expected non-null RawUiConfiguration.',
          );
          try {
            final RawMediaData? output = await api.editMedia(
              arg_data!,
              arg_editConfig!,
              arg_pickerConfig!,
              arg_uiConfig!,
            );
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.multimedia_picker.MultiMediaApi.openGallery$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<
          Object?
        >(pigeonVar_channel, (Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.openGallery was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final RawEditConfiguration? arg_editConfig =
              (args[0] as RawEditConfiguration?);
          assert(
            arg_editConfig != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.openGallery was null, expected non-null RawEditConfiguration.',
          );
          final RawPickerConfiguration? arg_pickerConfig =
              (args[1] as RawPickerConfiguration?);
          assert(
            arg_pickerConfig != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.openGallery was null, expected non-null RawPickerConfiguration.',
          );
          final RawUiConfiguration? arg_uiConfig =
              (args[2] as RawUiConfiguration?);
          assert(
            arg_uiConfig != null,
            'Argument for dev.flutter.pigeon.multimedia_picker.MultiMediaApi.openGallery was null, expected non-null RawUiConfiguration.',
          );
          try {
            final List<RawMediaData>? output = await api.openGallery(
              arg_editConfig!,
              arg_pickerConfig!,
              arg_uiConfig!,
            );
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}
