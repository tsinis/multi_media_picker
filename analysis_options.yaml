analyzer:
  exclude:
    # Build
    - "build/**"
    # Assets
    - "assets/**"
    # Mocks for test
    - "**/*.mocks.dart"
    # Coverage
    - "coverage/**"
    # Generated code
    - "**/*.g.dart"
    - "pigeons/*.dart"

  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  errors:
    # Info
    always_declare_return_types: info
    directives_ordering: info
    todo: info
    unsafe_html: info

    # Warning
    empty_catches: warning
    prefer_relative_imports: warning

    # Error
    always_require_non_null_named_parameters: error
    avoid_relative_lib_imports: error
    avoid_slow_async_io: error
    avoid_types_as_parameter_names: error
    cancel_subscriptions: error
    close_sinks: error
    valid_regexps: error

dart_code_metrics:
  extends:
    - package:dart_code_metrics_presets/all.yaml

  metrics:
    cyclomatic-complexity: 24
    maximum-nesting-level: 5
    number-of-parameters: 4
    source-lines-of-code: 60
  metrics-exclude:
    - test/**
    - pigeons/*.dart
  rules:
    # Adjusted:
    - add-copy-with:
        class-name-pattern: Configuration$
    - avoid-late-keyword:
        allow-initialized: true
    - no-magic-number:
        allowed: [-1, 0, 1, 2]
        allow-only-once: true
        ignore-instances: false
    - no-magic-string:
        allow-only-once: true
    - member-ordering:
        order:
          - constructors
          - public-fields
          - private-fields
    - arguments-ordering:
        alphabetize: true
        last:
          - child
          - children
    # Enabled:
    - avoid-accessing-collections-by-constant-index
    - avoid-accessing-other-classes-private-members
    - avoid-assigning-to-static-field
    - avoid-assignments-as-conditions
    - avoid-async-call-in-sync-function
    # - avoid-banned-annotations # explicitly disabled
    # - avoid-banned-file-names # explicitly disabled
    # - avoid-banned-imports # explicitly disabled
    # - avoid-banned-names # explicitly disabled
    # - avoid-banned-types # explicitly disabled
    - avoid-barrel-files
    - avoid-bottom-type-in-patterns
    - avoid-bottom-type-in-records
    - avoid-cascade-after-if-null
    - avoid-casting-to-extension-type
    - avoid-collapsible-if
    - avoid-collection-equality-checks
    - avoid-collection-methods-with-unrelated-types
    - avoid-collection-mutating-methods
    - avoid-complex-loop-conditions
    - avoid-conditions-with-boolean-literals
    - avoid-contradictory-expressions
    - avoid-declaring-call-method
    - avoid-double-slash-imports
    - avoid-duplicate-cascades
    - avoid-duplicate-constant-values
    - avoid-duplicate-exports
    - avoid-duplicate-initializers
    - avoid-duplicate-map-keys
    - avoid-duplicate-mixins
    - avoid-duplicate-named-imports
    - avoid-duplicate-patterns
    - avoid-duplicate-switch-case-conditions
    - avoid-duplicate-test-assertions
    - avoid-dynamic
    - avoid-empty-spread
    - avoid-empty-test-groups
    - avoid-equal-expressions
    - avoid-excessive-expressions
    - avoid-explicit-pattern-field-name
    - avoid-explicit-type-declaration
    - avoid-extensions-on-records
    - avoid-function-type-in-records
    - avoid-future-tostring
    - avoid-generics-shadowing
    # - avoid-getter-prefix # explicitly disabled
    - avoid-global-state
    - avoid-high-cyclomatic-complexity
    - avoid-identical-exception-handling-blocks
    - avoid-implicitly-nullable-extension-types
    - avoid-importing-entrypoint-exports
    - avoid-inverted-boolean-checks
    - avoid-keywords-in-wildcard-pattern
    - avoid-late-final-reassignment
    - avoid-local-functions
    - avoid-long-functions
    - avoid-long-files
    - avoid-long-parameter-list
    - avoid-long-records
    - avoid-map-keys-contains
    - avoid-missed-calls
    - avoid-missing-completer-stack-trace
    - avoid-missing-enum-constant-in-map
    - avoid-missing-interpolation
    # - avoid-missing-test-files # explicitly disabled
    - avoid-misused-test-matchers
    - avoid-misused-set-literals
    - avoid-misused-wildcard-pattern
    - avoid-mixing-named-and-positional-fields
    - avoid-multi-assignment
    - avoid-mutating-parameters
    - avoid-negated-conditions
    - avoid-nested-conditional-expressions
    - avoid-nested-extension-types
    - avoid-nested-futures
    - avoid-nested-records
    - avoid-nested-streams-and-futures
    - avoid-nested-switch-expressions
    - avoid-nested-switches
    - avoid-non-ascii-symbols
    - avoid-non-empty-constructor-bodies
    - avoid-non-final-exception-class-fields
    - avoid-non-null-assertion
    - avoid-not-encodable-in-to-json
    - avoid-nullable-interpolation
    - avoid-nullable-parameters-with-default-values
    - avoid-nullable-tostring
    - avoid-one-field-records
    - avoid-only-rethrow
    - avoid-passing-async-when-sync-expected
    - avoid-passing-default-values
    - avoid-passing-self-as-argument
    - avoid-positional-record-field-access
    - avoid-recursive-calls
    - avoid-redundant-async
    - avoid-redundant-else
    - avoid-redundant-positional-field-name
    - avoid-redundant-pragma-inline
    - avoid-referencing-discarded-variables
    - avoid-referencing-subclasses
    - avoid-renaming-representation-getters
    - avoid-returning-cascades
    - avoid-returning-void
    - avoid-self-assignment
    - avoid-self-compare
    - avoid-shadowed-extension-methods
    - avoid-shadowing
    - avoid-similar-names
    - avoid-slow-collection-methods
    - avoid-substring
    - avoid-suspicious-super-overrides
    - avoid-throw-in-catch-block
    - avoid-throw-objects-without-tostring
    - avoid-top-level-members-in-tests
    - avoid-type-casts
    - avoid-unassigned-late-fields
    - avoid-unassigned-stream-subscriptions
    - avoid-uncaught-future-errors
    - avoid-unconditional-break
    - avoid-unknown-pragma
    - avoid-unnecessary-call
    - avoid-unnecessary-collections
    - avoid-unnecessary-conditionals
    - avoid-unnecessary-constructor
    - avoid-unnecessary-enum-arguments
    - avoid-unnecessary-enum-prefix
    - avoid-unnecessary-extends
    - avoid-unnecessary-futures
    - avoid-unnecessary-getter
    - avoid-unnecessary-if
    - avoid-unnecessary-local-late
    - avoid-unnecessary-negations
    - avoid-unnecessary-nullable-return-type
    - avoid-unnecessary-overrides
    - avoid-unnecessary-reassignment
    - avoid-unnecessary-return
    - avoid-unnecessary-super
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - avoid-unrelated-type-casts
    - avoid-unsafe-collection-methods
    - avoid-unsafe-reduce
    - avoid-unused-after-null-check
    - avoid-unused-assignment
    - avoid-unused-generics
    - avoid-unused-instances
    - avoid-unused-parameters
    - avoid-weak-cryptographic-algorithms
    - avoid-wildcard-cases-with-enums
    # - banned-usage # explicitly disabled
    - binary-expression-operand-order
    - dispose-class-fields
    - double-literal-format
    - format-comment
    # - format-test-name # explicitly disabled
    - function-always-returns-null
    - handle-throwing-invocations
    - map-keys-ordering
    # - match-class-name-pattern # explicitly disabled
    - match-getter-setter-field-names
    - match-lib-folder-structure
    - match-positional-field-names-on-assignment
    - missing-test-assertion
    - move-records-to-typedefs
    - move-variable-closer-to-its-usage
    - move-variable-outside-iteration
    - newline-before-case
    - newline-before-method
    - newline-before-return
    - no-boolean-literal-compare
    - no-empty-block
    - no-equal-conditions
    - no-equal-nested-conditions
    - no-equal-switch-case
    - no-equal-switch-expression-cases
    - no-equal-then-else
    - no-object-declaration
    - parameters-ordering
    - prefer-abstract-final-static-class
    - prefer-addition-subtraction-assignments
    - prefer-any-or-every
    - prefer-async-await
    - prefer-boolean-prefixes
    - prefer-both-inlining-annotations
    - prefer-bytes-builder
    - prefer-commenting-analyzer-ignores
    - prefer-conditional-expressions
    - prefer-contains
    - prefer-correct-callback-field-name
    - prefer-correct-error-name
    - prefer-correct-for-loop-increment
    - prefer-correct-future-return-type
    - prefer-correct-handler-name
    - prefer-correct-identifier-length
    - prefer-correct-json-casts
    - prefer-correct-setter-parameter-name
    - prefer-correct-stream-return-type
    - prefer-correct-switch-length
    - prefer-correct-test-file-name
    - prefer-correct-throws
    - prefer-correct-type-name
    - prefer-declaring-const-constructor
    - prefer-early-return
    - prefer-enums-by-name
    - prefer-explicit-function-type
    - prefer-explicit-parameter-names
    - prefer-explicit-type-arguments
    - prefer-extracting-function-callbacks
    - prefer-first
    - prefer-getter-over-method
    - prefer-immediate-return
    - prefer-iterable-of
    - prefer-last
    - prefer-match-file-name
    - prefer-moving-to-variable
    - prefer-named-boolean-parameters
    # - prefer-named-imports # explicitly disabled
    - prefer-named-parameters
    - prefer-null-aware-spread
    - prefer-overriding-parent-equality
    - prefer-parentheses-with-if-null
    - prefer-prefixed-global-constants
    - prefer-private-extension-type-field
    - prefer-public-exception-classes
    - prefer-return-await
    - prefer-returning-conditional-expressions
    - prefer-simpler-boolean-expressions
    - prefer-simpler-patterns-null-check
    - prefer-single-declaration-per-file
    - prefer-specific-cases-first
    - prefer-static-class
    - prefer-switch-with-enums
    - prefer-switch-with-sealed-classes
    - prefer-trailing-comma
    - prefer-type-over-var
    - prefer-typedefs-for-callbacks
    - prefer-unique-test-names
    - prefer-unwrapping-future-or
    - prefer-visible-for-testing-on-members
    - prefer-wildcard-pattern
    # - tag-name # explicitly disabled
    - unnecessary-trailing-comma
    - use-existing-variable
    - avoid-negations-in-equality-checks
    - avoid-incorrect-uri
    - function-always-returns-same-value
    - prefer-add-all
    - prefer-for-in
    - prefer-define-hero-tag
    - always-remove-listener
    - avoid-border-all
    - avoid-returning-widgets
    - avoid-shrink-wrap-in-lists
    - avoid-unnecessary-setstate
    - avoid-expanded-as-spacer
    - avoid-wrapping-in-padding
    - check-for-equals-in-render-object-setters
    - consistent-update-render-object
    - prefer-const-border-radius
    - prefer-correct-edge-insets-constructor
    - prefer-extracting-callbacks
    - prefer-single-widget-per-file
    - prefer-using-list-view
    - use-setstate-synchronously
    - avoid-incomplete-copy-with
    - proper-super-calls
    - dispose-fields
    - avoid-empty-setstate
    - prefer-widget-private-members
    - prefer-action-button-tooltip
    - avoid-inherited-widget-in-initstate
    - avoid-late-context
    - avoid-state-constructors
    - avoid-unnecessary-stateful-widgets
    - avoid-stateless-widget-initialized-fields
    - avoid-missing-image-alt
    - avoid-unnecessary-overrides-in-state
    - prefer-dedicated-media-query-methods
    - avoid-recursive-widget-calls
    - prefer-text-rich
    - prefer-sliver-prefix
    - avoid-single-child-column-or-row
    - avoid-undisposed-instances
    - avoid-unnecessary-gesture-detector
    - avoid-missing-controller
    - prefer-for-loop-in-children
    - avoid-incorrect-image-opacity
    - prefer-sized-box-square
    - avoid-flexible-outside-flex
    - prefer-center-over-align
    - prefer-padding-over-container

    # Disabled:
    - avoid-adjacent-strings: false # Only being used in toString() methods.
    - avoid-duplicate-collection-elements: false # They are being used on purpose.
    - avoid-ignoring-return-values: false # Mostly, collection methods are ignored.
    - avoid-inferrable-type-arguments: false # Against prefer-explicit-type-arguments.
    - enum-constants-ordering: false # This might be a breaking change.
    - no-equal-arguments: false # Not our use-case here.
    - prefer-test-matchers: false # Introduces coupling in tests.

linter:
  rules:
    # Disabled:
    always_put_control_body_on_new_line: false # Makes code harder to read.
    omit_local_variable_types: false # Conflicts with: prefer-type-over-var.
    always_specify_types: false # Conflicts with: omit_local_variable_types.
    always_use_package_imports: false # Conflicts with: prefer_relative_imports.
    avoid_classes_with_only_static_members: false # Conflicts with: prefer-static-class
    flutter_style_todos: false # Not a Flutter team.
    # omit_obvious_local_variable_types: true # Conflicts with: specify_nonobvious_local_variable_types. #TODO! After Dart 3.6 is released.
    prefer_final_parameters: false # Conflicts with: avoid_final_parameters.
    prefer_double_quotes: false # Conflicts with: prefer_double_quotes.
    unnecessary_final: false # Conflicts with: prefer_final_locals.
    unnecessary_library_name: false # To prevent breaking changes for those who use this libs.
    diagnostic_describe_all_properties: false # TODO? Enable and fix this in the far-future.

    # Enabled:
    # specify_nonobvious_local_variable_types: true #TODO! After Dart 3.6 is released.
    # use_truncating_division: true #TODO! After Dart 3.6 is released.
    always_declare_return_types: true
    always_put_required_named_parameters_first: true
    always_require_non_null_named_parameters: true
    annotate_overrides: true
    annotate_redeclares: true
    avoid_annotating_with_dynamic: true
    avoid_bool_literals_in_conditional_expressions: true
    avoid_catches_without_on_clauses: true
    avoid_catching_errors: true
    avoid_double_and_int_checks: true
    avoid_dynamic_calls: true
    avoid_empty_else: true
    avoid_equals_and_hash_code_on_mutable_classes: true
    avoid_escaping_inner_quotes: true
    avoid_field_initializers_in_const_classes: true
    avoid_final_parameters: true
    avoid_function_literals_in_foreach_calls: true
    avoid_implementing_value_types: true
    avoid_init_to_null: true
    avoid_js_rounded_ints: true
    avoid_multiple_declarations_per_line: true
    avoid_null_checks_in_equality_operators: true
    avoid_positional_boolean_parameters: true
    avoid_print: true
    avoid_private_typedef_functions: true
    avoid_redundant_argument_values: true
    avoid_relative_lib_imports: true
    avoid_renaming_method_parameters: true
    avoid_return_types_on_setters: true
    avoid_returning_null: true
    avoid_returning_null_for_future: true
    avoid_returning_null_for_void: true
    avoid_returning_this: true
    avoid_setters_without_getters: true
    avoid_shadowing_type_parameters: true
    avoid_single_cascade_in_expression_statements: true
    avoid_slow_async_io: true
    avoid_type_to_string: true
    avoid_types_as_parameter_names: true
    avoid_types_on_closure_parameters: true
    avoid_unnecessary_containers: true
    avoid_unused_constructor_parameters: true
    avoid_void_async: true
    avoid_web_libraries_in_flutter: true
    await_only_futures: true
    camel_case_extensions: true
    camel_case_types: true
    cancel_subscriptions: true
    cascade_invocations: true
    cast_nullable_to_non_nullable: true
    close_sinks: true
    collection_methods_unrelated_type: true
    combinators_ordering: true
    comment_references: true
    conditional_uri_does_not_exist: true
    constant_identifier_names: true
    control_flow_in_finally: true
    curly_braces_in_flow_control_structures: true
    dangling_library_doc_comments: true
    depend_on_referenced_packages: true
    deprecated_consistency: true
    deprecated_member_use_from_same_package: true
    directives_ordering: true
    discarded_futures: true
    do_not_use_environment: true
    document_ignores: true
    empty_catches: true
    empty_constructor_bodies: true
    empty_statements: true
    enable_null_safety: true
    eol_at_end_of_file: true
    exhaustive_cases: true
    file_names: true
    hash_and_equals: true
    implementation_imports: true
    implicit_call_tearoffs: true
    implicit_reopen: true
    invalid_case_patterns: true
    invalid_runtime_check_with_js_interop_types: true
    join_return_with_assignment: true
    leading_newlines_in_multiline_strings: true
    library_annotations: true
    library_names: true
    library_prefixes: true
    library_private_types_in_public_api: true
    lines_longer_than_80_chars: true
    literal_only_boolean_expressions: true
    matching_super_parameters: true
    missing_code_block_language_in_doc_comment: true
    missing_whitespace_between_adjacent_strings: true
    no_adjacent_strings_in_list: true
    no_default_cases: true
    no_duplicate_case_values: true
    no_leading_underscores_for_library_prefixes: true
    no_leading_underscores_for_local_identifiers: true
    no_literal_bool_comparisons: true
    no_logic_in_create_state: true
    no_runtimeType_toString: true
    no_self_assignments: true
    no_wildcard_variable_uses: true
    non_constant_identifier_names: true
    noop_primitive_operations: true
    null_check_on_nullable_type_parameter: true
    null_closures: true
    one_member_abstracts: true
    only_throw_errors: true
    overridden_fields: true
    package_api_docs: true
    package_names: true
    package_prefixed_library_names: true
    parameter_assignments: true
    prefer_adjacent_string_concatenation: true
    prefer_asserts_in_initializer_lists: true
    prefer_asserts_with_message: true
    prefer_collection_literals: true
    prefer_conditional_assignment: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_constructors_over_static_methods: true
    prefer_contains: true
    prefer_equal_for_default_values: true
    prefer_expression_function_bodies: true
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    prefer_for_elements_to_map_fromIterable: true
    prefer_foreach: true
    prefer_function_declarations_over_variables: true
    prefer_generic_function_type_aliases: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_if_null_operators: true
    prefer_initializing_formals: true
    prefer_inlined_adds: true
    prefer_int_literals: true
    prefer_interpolation_to_compose_strings: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_is_not_operator: true
    prefer_iterable_whereType: true
    prefer_mixin: true
    prefer_null_aware_method_calls: true
    prefer_null_aware_operators: true
    prefer_relative_imports: true
    prefer_single_quotes: true
    prefer_spread_collections: true
    prefer_typing_uninitialized_variables: true
    prefer_void_to_null: true
    provide_deprecation_message: true
    public_member_api_docs: false # TODO! Enable after all public APIs are documented.
    recursive_getters: true
    require_trailing_commas: true
    secure_pubspec_urls: true
    sized_box_for_whitespace: true
    sized_box_shrink_expand: true
    slash_for_doc_comments: true
    sort_child_properties_last: true
    sort_constructors_first: true
    sort_pub_dependencies: true
    sort_unnamed_constructors_first: true
    test_types_in_equals: true
    throw_in_finally: true
    tighten_type_of_initializing_formals: true
    type_annotate_public_apis: true
    type_init_formals: true
    type_literal_in_constant_pattern: true
    unawaited_futures: true
    unintended_html_in_doc_comment: true
    unnecessary_await_in_return: true
    unnecessary_brace_in_string_interps: true
    unnecessary_breaks: true
    unnecessary_const: true
    unnecessary_constructor_name: true
    unnecessary_getters_setters: true
    unnecessary_lambdas: true
    unnecessary_late: true
    unnecessary_library_directive: true
    unnecessary_new: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_aware_operator_on_extension_on_nullable: true
    unnecessary_null_checks: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_nullable_for_final_variable_declarations: true
    unnecessary_overrides: true
    unnecessary_parenthesis: true
    unnecessary_raw_strings: true
    unnecessary_statements: true
    unnecessary_string_escapes: true
    unnecessary_string_interpolations: true
    unnecessary_this: true
    unnecessary_to_list_in_spreads: true
    unreachable_from_main: true
    unrelated_type_equality_checks: true
    unsafe_html: true
    use_build_context_synchronously: true
    use_colored_box: true
    use_decorated_box: true
    use_enums: true
    use_full_hex_values_for_flutter_colors: true
    use_function_type_syntax_for_parameters: true
    use_if_null_to_convert_nulls_to_bools: true
    use_is_even_rather_than_modulo: true
    use_key_in_widget_constructors: true
    use_late_for_private_fields_and_variables: true
    use_named_constants: true
    use_raw_strings: true
    use_rethrow_when_possible: true
    use_setters_to_change_properties: true
    use_string_buffers: true
    use_string_in_part_of_directives: true
    use_super_parameters: true
    use_test_throws_matchers: true
    use_to_and_as_if_applicable: true
    valid_regexps: true
    void_checks: true
